created: 20180825043907936
modified: 20180826043843482
module-type: filteroperator
tags: 
title: $:/plugins/Guitlle/helpers/titledate.js
type: application/javascript

/*\
title: $:/core/modules/filters/days.js
type: application/javascript
module-type: filteroperator

Filter operator that selects tiddlers with a specified date field within a specified date interval.

\*/
(function(){

/*jslint node: true, browser: true */
/*global $tw: false */
"use strict";

/*
Export our filter function
*/
exports.titledate = function(source,operator,options) {
    var results = [];
    switch(operator.suffix) {
        case "afterOffset":
            var dayInterval = (parseInt(operator.operand,10)||0),
                dayIntervalSign = $tw.utils.sign(dayInterval),
                targetTimeStamp = (new Date()).setHours(0,0,0,0) + 1000*60*60*24*dayInterval,
                isWithinDays = function(dateField) {
                    var sign = $tw.utils.sign(targetTimeStamp - (new Date(dateField)).setHours(0,0,0,0));
                    return sign === 0 || sign === dayIntervalSign;
                };
            if(operator.prefix === "!") {
                targetTimeStamp = targetTimeStamp - 1000*60*60*24*dayIntervalSign;
                source(function(tiddler,title) {
                    if(!isWithinDays(title )  ) {
                        results.push(title);
                    }
                });
            } else {
                source(function(tiddler,title) {
                    if(isWithinDays(title) ) {
                        results.push(title);
                    }
                });
            }
        break;
        case "toOffsetFromDate": 
            // Empty value means today
            // Converts offsets to numbers
            var from = new Date(operator.operand);
            if (isNaN(from.getYear())) {
                from = new Date();
            }
            source(function(tiddler,title) {
                try {
                    results.push(String(Math.floor((from - (new Date(title)))/(24*60*60*1000))));
                }
                catch (e) {
                    results.push("NaT");
                }
            });
        break;
	}
	return results;
};

})();
